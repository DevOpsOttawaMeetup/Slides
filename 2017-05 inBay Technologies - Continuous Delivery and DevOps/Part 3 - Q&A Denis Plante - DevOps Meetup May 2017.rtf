{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\vieww21340\viewh19260\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs32 \cf0 Pre - DevOps   \

\b0\fs28 \
In the past 33 years of R&D experience , I have seen the evolution from pen and paper to computers.  From silo functional organizations to matrix organization to promote collaboration.  All which claim to be better in delivery of product.\
\
Infrastructure, Operations were typically divided in Silo with:\
\
\pard\pardeftab720\li720\partightenfactor0
\cf0 1- Voice services\
2- Network Operations\
3- IT operations, Servers and Applications for business\
4- R&D development with some sort of Lab support to provide Computing and networking infrastructure.\
\pard\pardeftab720\partightenfactor0
\cf0 \
R&D Lab infrastructure grew as pockets of features and integration partial with other services was always incomplete from product to product.  On the management side it was difficult as every server/services  had its own way of managing, debug and monitoring.  A small change in development code would often break other shared development.   More time was spent on keeping the eco system up and running then deploying new software loads.\
\

\b\fs32 Virtualization.
\b0\fs28 \
\
The best part of visualization is the ability to deploy many soft computers on a single compute to share resources of the bare computer.  Also to recover mistakes and changes made snapshots were your best friend.  Ability to revert was a great time saver.\
\

\b\fs32 Enter the world of DevOps
\b0\fs28 \
\
To overcome delays and speed up time to market, both Development and Operations have to work closely together and be aligned on infrastructure deployment and operations and the development needs access for continuous delivery of features provide redundancy expansion and self healing of services provided.    \
\
To achieve this changes on how we work, collaborate and architecture must change to benefit everyone.\
\

\b\fs32 An evolving architecture, unifying Development and Operations
\b0\fs28 \
\
Cloud services, how to deploy and manage?  No more shrink wrapped DVDs.\
\
With DCOS (Data Center OS), brings the physical or VM computing resources together which can be expanded easily via automated scripting.   Physical scalability is addressed by adding more physical computers and deployment is treated as code with automated scripting such as Ansible.\
\
Development  provide all software loads in docker containers as micro-services in which are automatically deployed, scaled and also self healing of a computer node is out of service due to a failure.\
\
Deployment , debug logs, monitoring is now unified with all services reporting to the same set of services.\
\
With IP load balancing and HA proxy at the ingress, it is easy to carve out production, beta or isolated environments to provide services.\
\

\b\fs32 Lessons learned
\b0\fs28 \
\
-  Shift out of the silo mentality to a DevOps melding this will place developers and operation staff on the same page and breakdown responsibilities as it becomes more mixed.\
  \
-  Automate infrastructure commissioning and delivery of nodes\
\
-  build a DCOS Cluster which allows expansions of all software services running in the Cluster.   It is scalable, redundant and self healing.\
\
- Automate continuous deployment of software delivery to provide services.  When its ready deploy.\
\
-  Monitor health of the cluster and logs\
\
-  Segment use cases vi a front end proxy as required.  This shares  the same DCOS infrastructure with having to duplicate servers and services.\
\
- Recovery is fast, simply restart a previous version of the service.  No need for snapshots for recovery as software loads are in a centralized accessible registry. \
\pard\pardeftab720\sl276\slmult1\sa200\partightenfactor0
\cf0 \
}